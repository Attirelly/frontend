"use client";

import React from "react";
import { Select, Input } from "antd";
import type { ProductFiltersType, FilterOptions } from "@/types/ProductTypes";

const { Option } = Select;
const { Search } = Input;

type ProductFiltersProps = {
  filters: ProductFiltersType;
  setFilters: React.Dispatch<React.SetStateAction<ProductFiltersType>>;
  filterOptions: FilterOptions;
};


/**
 * @module ProductFilters
 * @description A UI component that provides a set of dropdown filters to refine a list of products.
 * This is a controlled component, meaning it receives its state and state-setter function from a parent component.
 *
 * ## Features
 * - **Controlled Component**: It is fully controlled by its parent. It receives the current filter state (`filters`) and an update function (`setFilters`) via props.
 * - **Comprehensive Filtering**: Offers a wide range of filters including Product Name, SKU, multiple levels of Categories, Size, Color, Status, and more.
 * - **Dynamic Options**: The options for most filters are passed in via the `filterOptions` prop, making the component highly reusable and data-driven.
 * - **Multi-Select**: Most filters are configured as multi-select dropdowns, allowing the user to select several values for a single filter criterion.
 * - **Responsive Layout**: Uses a CSS grid to create a responsive layout where filter inputs automatically wrap to the next line on smaller screens.
 *
 * ## Logic Flow
 * 1.  The component receives the current `filters` object and an object containing all possible `filterOptions` as props from its parent.
 * 2.  It renders a series of `Select` components from the `antd` library.
 * 3.  The `value` of each `Select` component is bound to a specific property in the `filters` prop object (e.g., `value={filters.productName}`).
 * 4.  The options for each dropdown are generated by mapping over the corresponding array in the `filterOptions` prop.
 * 5.  When a user changes a selection in any of the `Select` components, the `onChange` event is triggered.
 * 6.  The `onChange` handler calls the `setFilters` function (passed in via props), creating a new filter state object by spreading the existing `filters` and updating only the property that was changed. This lifts the state up to the parent component.
 *
 * ## Imports
 * - **Core/Libraries**:
 *    - `React` from `react`.
 *    - `Select`, `Input` from `antd`: UI components for creating dropdowns and search inputs.
 * - **Types**:
 *    - `ProductFiltersType`, `FilterOptions` from `@/types/ProductTypes`: TypeScript types that define the shape of the filter state and the available filter options.
 *
 * ## API Calls
 * - This component does not make any direct API calls. The parent component that uses these filters is responsible for making API calls to fetch the filtered data.
 *
 * ## Props
 * @param {object} props - The props for the component.
 * @param {ProductFiltersType} props.filters - The current state of all filters, managed by the parent component.
 * @param {React.Dispatch<React.SetStateAction<ProductFiltersType>>} props.setFilters - The state setter function from the parent component to update the filters.
 * @param {FilterOptions} props.filterOptions - An object containing arrays of all possible options for each filter dropdown.
 *
 * @returns {JSX.Element} The rendered product filters panel.
 */
const ProductFilters: React.FC<ProductFiltersProps> = ({
  filters,
  setFilters,
  filterOptions,
}) => {
  return (
    <div style={{ width: "100%", marginRight: 20 }}>
      <h3 className="text-black">Filters</h3>
      <div
        style={{
          display: "grid",
          gridTemplateColumns: "repeat(auto-fill, minmax(200px, 1fr))",
          gap: "16px",
        }}
      >

        <Select
          mode="multiple"
          placeholder="Product Name"
          value={filters.productName}
          onChange={(v) => setFilters({ ...filters, productName: v })}
        >
          {filterOptions.productNames.map((c) => (
            <Option key={c}>{c}</Option>
          ))}
        </Select>

        <Select
          mode="multiple"
          placeholder="SKU"
          value={filters.sku}
          onChange={(v) => setFilters({ ...filters, sku: v })}
        >
          {filterOptions.skus.map((c) => (
            <Option key={c}>{c}</Option>
          ))}
        </Select>

        <Select
          mode="multiple"
          placeholder="Primary Category"
          value={filters.pmCat}
          onChange={(v) => setFilters({ ...filters, pmCat: v })}
        >
          {filterOptions.categories
            .filter((cat) => cat.level === 1)
            .map((cat) => (
              <Option key={cat.category_id} value={cat.name}>{cat.name}</Option>
            ))}
        </Select>

        {/* <Select
          mode="multiple"
          placeholder="Sub Category 1"
          value={filters.subCat1}
          onChange={(v) => setFilters({ ...filters, subCat1: v })}
        >
          {filterOptions.categories
            .filter((cat) => cat.level === 2)
            .map((cat) => (
              <Option key={cat.category_id} value={cat.name}>{cat.name}</Option>
            ))}
        </Select> */}

        <Select
          mode="multiple"
          placeholder="Sub Category 2"
          value={filters.subCat2}
          onChange={(v) => setFilters({ ...filters, subCat2: v })}
        >
          {filterOptions.categories
            .filter((cat) => cat.level === 3)
            .map((cat) => (
              <Option key={cat.category_id} value={cat.name}>{cat.name}</Option>
            ))}
        </Select>

        <Select
          mode="multiple"
          placeholder="Sub Category 3"
          value={filters.subCat3}
          onChange={(v) => setFilters({ ...filters, subCat3: v })}
        >
          {filterOptions.categories
            .filter((cat) => cat.level === 4)
            .map((cat) => (
              <Option key={cat.category_id} value={cat.name}>{cat.name}</Option>
            ))}
        </Select>

        <Select
          mode="multiple"
          placeholder="Size"
          value={filters.size}
          onChange={(v) => setFilters({ ...filters, size: v })}
        >
          {filterOptions.sizes.map((s) => (
            <Option key={s}>{s}</Option>
          ))}
        </Select>

        <Select
          mode="multiple"
          placeholder="Color"
          value={filters.color}
          onChange={(v) => setFilters({ ...filters, color: v })}
        >
          {filterOptions.colors.map((c) => (
            <Option key={c}>{c}</Option>
          ))}
        </Select>

        {/* <Select
          mode="multiple"
          placeholder="Fabric"
          onChange={(v) => setFilters({ ...filters, fabric: v })}
        >
          {["Cotton", "Linen", "Silk"].map((f) => (
            <Option key={f}>{f}</Option>
          ))}
        </Select> */}

        {/* <Select
          placeholder="Available for Rent"
          allowClear
          onChange={(v) =>
            setFilters({
              ...filters,
              rentAvailable: v === undefined ? null : v,
            })
          }
          value={filters.rentAvailable}
        >
          <Option value={true}>Yes</Option>
          <Option value={false}>No</Option>
        </Select> */}

        <Select
          mode="multiple"
          placeholder="Status"
          onChange={(v) => setFilters({ ...filters, status: v })}
        >
          <Option value="Active">Active</Option>
          <Option value="Inactive">Inactive</Option>
        </Select>

        {/* <Select
          placeholder="City"
          allowClear // <== add this to allow clearing
          onChange={(v) =>
            setFilters({ ...filters, city: v ?? null, subLocation: [] })
          }
          value={filters.city}
        >
          {Object.keys(cityToSubLocation).map((city) => (
            <Option key={city} value={city}>
              {city}
            </Option>
          ))}
        </Select> */}

        {/* <Select
          mode="multiple"
          placeholder="Sub-location"
          value={filters.subLocation}
          onChange={(v) => setFilters({ ...filters, subLocation: v })}
          disabled={!filters.city}
        >
          {filters.city &&
            cityToSubLocation[filters.city].map((subloc) => (
              <Option key={subloc}>{subloc}</Option>
            ))}
        </Select> */}


        {/* <Search
          placeholder="Product Name"
          onSearch={(v) => setFilters({ ...filters, productName: v })}
          allowClear
        >
        </Search> */}

        {/* <Search
          placeholder="SKU ID"
          onSearch={(v) => setFilters({ ...filters, sku: v })}
          allowClear
        >
        </Search> */}

        <Select
          placeholder="Image Upload Status"
          allowClear
          onChange={(v) => setFilters({ ...filters, imageUploadStatus: v })}
        >
          <Option value="Completed">Completed</Option>
          <Option value="Pending">Pending</Option>
        </Select>

        <Select
          mode="multiple"
          placeholder="Source"
          onChange={(v) => setFilters({ ...filters, source: v })}
        >
          <Option value="Self">Self</Option>
          <Option value="Shopify">Shopify</Option>
        </Select>
      </div>
    </div>
  );
};

export default ProductFilters;